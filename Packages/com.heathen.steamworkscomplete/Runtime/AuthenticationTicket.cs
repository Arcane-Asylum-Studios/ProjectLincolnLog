#if !DISABLESTEAMWORKS && HE_SYSCORE && STEAMWORKSNET
using Steamworks;
using System;
using UnityEngine;

namespace HeathenEngineering.SteamworksIntegration
{
    /// <summary>
    /// Represents a ticket such as is generated by a user and sent to start an authentication session.
    /// </summary>
    [Serializable]
    public class AuthenticationTicket
    {
        /// <summary>
        /// Indicates that this session is being managed by a client or server
        /// </summary>
        public bool IsClientTicket { get; private set; } = true;
        /// <summary>
        /// The authentication handle associated with this ticket
        /// </summary>
        public HAuthTicket Handle { get; private set; }
        /// <summary>
        /// The ticket data of this ticket ... this is what should be sent to servers for processing
        /// </summary>
        public byte[] Data { get; private set; }
        /// <summary>
        /// Has this ticket been verified, this gets set to true when the Get Authentication Session response comes back from the Steamworks backend.
        /// </summary>
        public bool Verified { get; private set; }
        /// <summary>
        /// The Steamworks date time this ticket was created
        /// </summary>
        public uint CreatedOn { get; private set; }
        /// <summary>
        /// The <see cref="EResult"/> of the ticket
        /// </summary>
        public EResult Result { get; private set; }
        /// <summary>
        /// A delegate of form (<see cref="AuthenticationTicket"/> ticket, <see cref="bool"/> ioError) to be invoked when ready
        /// </summary>
        public Action<AuthenticationTicket, bool> Callback { get; private set; }
        /// <summary>
        /// Construct a new AuthenticationTicket object for a specific identity
        /// </summary>
        /// <param name="forIdentity">The identity to create the ticket for</param>
        /// <param name="callback">A delegate of form (<see cref="AuthenticationTicket"/> ticket, <see cref="bool"/> ioError) to be invoked on completion</param>
        /// <param name="isClient">Is this ticket for a client or server</param>
        public AuthenticationTicket(SteamNetworkingIdentity forIdentity, Action<AuthenticationTicket, bool> callback, bool isClient = true)
        {
            Callback = callback;
            IsClientTicket = isClient;
            var array = new byte[1024];
            uint m_pcbTicket;
            if(isClient)
                Handle = SteamUser.GetAuthSessionTicket(array, 1024, out m_pcbTicket, ref forIdentity);
            else
                Handle = SteamGameServer.GetAuthSessionTicket(array, 1024, out m_pcbTicket, ref forIdentity);
            CreatedOn = SteamUtils.GetServerRealTime();
            Array.Resize(ref array, (int)m_pcbTicket);
            Data = array;
        }

        public AuthenticationTicket(byte[] dataToInclude, Action<AuthenticationTicket, bool> callback)
        {
            Callback = callback;
            IsClientTicket = true;
            
            var callResult = SteamUser.RequestEncryptedAppTicket(dataToInclude, dataToInclude.Length);
            API.Authentication.m_EncryptedAppTicketResponse.Set(callResult, (result, error) =>
            {
                if(!error)
                {
                    if (result.m_eResult == EResult.k_EResultOK)
                    {
                        byte[] array = new byte[1024];
                        if (SteamUser.GetEncryptedAppTicket(array, 1024, out var m_pcbTicket))
                        {
                            array = new byte[1024];
                            Array.Resize(ref array, (int)m_pcbTicket);
                            Data = array;
                            CreatedOn = SteamUtils.GetServerRealTime();
                            callback?.Invoke(this, error);
                        }
                    }
                    else
                    {
                        Debug.LogError("Invalid encrypted ticket, no action taken.");
                        callback?.Invoke(this, true);
                    }
                }
            });
        }

        public AuthenticationTicket(string webIdentity, Action<AuthenticationTicket, bool> callback)
        {
            Callback = callback;
            IsClientTicket = true;
            
            Handle = SteamUser.GetAuthTicketForWebApi(webIdentity);
            CreatedOn = SteamUtils.GetServerRealTime();
            
            Data = null;
        }

        /// <summary>
        /// Handle the Steam native authentication session ticket response
        /// </summary>
        /// <param name="response">The <see cref="Steamworks.GetAuthSessionTicketResponse_t"/></param> from Steam session ticket response
        public void Authenticate(GetAuthSessionTicketResponse_t response)
        {
            if (Handle != default && Handle != HAuthTicket.Invalid
                    && response.m_eResult == EResult.k_EResultOK)
            {
                Result = response.m_eResult;
                Verified = true;
                Callback?.Invoke(this, false);
            }
            else
            {
                Result = response.m_eResult;
                Callback?.Invoke(this, true);
            }
        }

        public void Authenticate(GetTicketForWebApiResponse_t response)
        {
            Data = response.m_rgubTicket;

            if (Handle != default && Handle != HAuthTicket.Invalid
                    && response.m_eResult == EResult.k_EResultOK)
            {
                Result = response.m_eResult;
                Verified = true;
                Callback?.Invoke(this, false);
            }
            else
            {
                Result = response.m_eResult;
                Callback?.Invoke(this, true);
            }
        }

        /// <summary>
        /// The age of this ticket from the current server real time value
        /// </summary>
        public TimeSpan Age
        {
            get { return new TimeSpan(0, 0, (int)(SteamUtils.GetServerRealTime() - CreatedOn)); }
        }

        /// <summary>
        /// Cancels the ticket
        /// </summary>
        public void Cancel()
        {
            if (IsClientTicket)
                SteamUser.CancelAuthTicket(Handle);
            else
                SteamGameServer.CancelAuthTicket(Handle);
        }
    }
    }
#endif